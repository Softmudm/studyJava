Oracle数据库
	版本			驱动包
--oracle10g  ojdbc14.jar
--oracle11g  ojdbc6.jar


一.创建表空间和用户

1.登录sys账号(选择sysdba)

2.创建表空间语句(于应用性能和管理方面的考虑，最好为不同的用户创建独立的表空间）
  create tablespace 表空间名字 datafile '路径/名称.DBF' size 200M autoextend on next 10M maxsize unlimited; 

3.创建用户语句
  create user 用户名称 identified by 用户密码 default tablespace 表空间名称;

4.授权，否则无法登陆连接数据库
  grant 权限 to 用户; 
  grant 角色 to 用户;
撤销权限或角色：把grant换成revoke

5.解锁
  alter user scott account unlock

二.创建表和约束

1.使用普通用户登录数据库

2.操作表
  create table 表名称
  ( 
  列名1 数据类型，
  列名2 数据类型，
  )				--创建表
  drop table 表名称 		--删除表

3.操作表结构
注释
  comment on table/column 表名称/表名称.列名称 is '注释内容'
列
  		   add (列名 数据类型);    	  --增加列
  alter table 表名 drop column 列名   		  --删除列
		   modify (列名 数据类型); 	  --修改列类型
		   rename column 原列名 to 新列名 --修改列名

约束
					   primary key (列名); --主键约束
					   foreign key (列名) references 表名 (列名) on delete [set null/cascade/no action]; --外键约束
  alter table 表名 add constraint 约束名称 unique (列名);      --唯一约束
  					   check (列名>xx);    --检查约束
  删除约束
  alter table 表名 drop constraint 约束名称

三.SQL语言

DCL （数据控制语言）
数据控制语言 – Data Control Language
指用于设置用户权限语句
grant、revoke、if…else、while、begin transaction

DDL （数据定义语言）
数据定义语言 - Data Definition Language
用来定义数据库的对象，如数据表、视图、索引等
create、alter、drop、truncate

---------------对应上面的笔记------------------

DML （数据处理语言）
数据处理语言 - Data Manipulation Language
在数据库表中更新，增加和删除记录
update、insert、delete 不包含查询

DQL （数据查询语言）（★★★★★）
数据查询语言 – Data Query Language
数据表记录的查询。
select

TCL （事务控制语言）
事务控制语言 – Transaction Control Language
控制事务语句
commit、savepoint、rollback
----------------------------------------------

DML语言

增加
insert into 表名 (列名1,列名2,...) values(值1,,值2,...)
	序列：默认从1开始依次递增，用来给主键赋值，不属于任何表但是可以和表逻辑绑定
		 事务回滚不能使序列值回到之前。
		create sequence 序列名称
		select 序列名称.currval/nextval from dual
	  --currval当前值，nextval下一个
	  --dual虚表，无意义，补全语法
delete from 表名 where ...

修改
update 表名 set 列名1=值1,列名2=值2,... where ...

注意!!!
delete、truncate、drop的区别
delete只删除数据(一行或多行可选)
truncate清空数据、重设auto_increament计数器、对事务无影响
drop删除所有数据和(结构、索引、约束)

DQL语言
注意!!!!
查询时尽量少用*，把要查询的字段都列出来不仅可以提高效率，
还能避免一些错误。

select [distinct] 列名 [as 列别名]
	from 表名1 [as 表别名1]
	[inner/left/right join 表名2]  --联合查询
	[where...]					--查询结果条件
	[group by 列名]				   	--查询结果按字段分组
	[having...]					--过滤分组结果条件
	[order by...]				        --排序
	[limit...]					--分页查询

distinct 列名
根据后面的列名去重

联合查询 join

	交叉连接
	1.select * from 表1,表2;
	2.select * from 表1 cross join 表2;

	内连接
	1.select * from 表1,表2 where 字段1=字段2;
	2.select * from 表1 [inner] join 表2 on 字段1=字段2;

	左外连接
	1.select * from 表1,表2 where 字段1=字段2(+);
	2.select * from 表1 left [outer] join 表2 on 字段1=字段2;

	右外连接
	1.select * from 表1,表2 where 字段1(+)=字段2;
	2.select * from 表1 right [outer] join 表2 on 字段1=字段2;

	自连接
	自连接其实可以理解成上面几个连接中连接的两张表是一摸一样的

查询结果条件 where

	>  <  =  between and  or  like  in  
	其中like是模糊查询
	select * from 表名 where 列名 like '% 或 _'
	%代表多个字符，_代表一个字符
	还有判断是否不能用=要用is/is not

分组 group by

	select 聚合函数() ...from 表名 where ... group by 列名
	注意!!!：只有group by后面有的列才能写到前面select后。

	聚合函数：
	max(),min(),sum(),count(),avg()

过滤分组结果 having
	
	对分组后的结果进行筛选

排序 order by
	
	列名1 排序规则，列名2 排序规则
	排序规则：asc 升序，desc 降序

分页 limit 
	
	limit是mysql中的关键字，
	在Oracle中使用伪列来实现分页
	rownum(行号)和rowid(行id)

	rownum是select一查出来加上的，在排序之前
	rownum只能从1开始依次递增，所以where中不能写rownum>正数。

	oracle带排序分页(例子：查20到30条)
	select * from(
		select rownum rn,ttt.* from(
			select .. from .. where .. order by ..
			//这里是待分页的查询语句
		) ttt where rownum <=30  --这里不能用rn，因为where比别名先运算
	) where rn>=20

索引
	索引就是在表的列上创建一个二叉树
	索引会提高查询效率，但会影响增删改的效率
	单列索引
	触发规则:只有查询条件是原始值才会触发索引(单行函数，模糊查询都会影响)
	create index 索引名称 on 表名(列名);
	复合索引
	触发规则:必须包含列名1的原始值才会触发索引
	注意(列名1or列名2)连接的相当于两条查询语句不会触发复合索引
	create index 索引名称 on 表名(列名1,列名2)

单行函数(作用于一行，返回一个值)
	字符函数
		select initcap('yes') from dual;--Yes首字母大写
		select upper/lower('yes') from dual;--YES/yes全部大/小写
		select ltrim/rtrim('aaajavaaaa','aj/va') from dual;--vaaa/aaaj左/右裁剪，后面参数顺序无关
		select translate('jack','abcd','1234') from dual;--j13k按字符翻译
		select replace('jack','k','lala') from dual;--jaclala字符串替换
		select instr('worldwide','d') from dual;--5查找子串位置，从左边开始
		select substr('abcdefgh',3,4) from dual;--cdef取子字符串
		select concat('Hello','world') from dual;--Helloworld字符串连接

	数值函数
		select abs(-5) from dual;--5取绝对值
		select sign(-32) from dual;--(-1)取符号
		select ceil/floor(44.5) from dual;--45/44向上/下取整
		select round(56.53,1) from dual;--56.5第二个参数是保留几位小数可以是负数
		select round(56.53,-1) from dual;--60四舍五入
		select trunc(56.53,-1) from dual;--50截取
		select power(2,4) from dual;--16m的n次方
		select sqrt(16) from dual;4平方根
		select mod(10,3) from dual;1取余
		select sin() from dual;--正弦
		select cos()from dual;--余弦

	转换函数
		to_char(date类型,'[fm] YYYY-MM-DD hh[24]:mi:ss')--转换为字符串
		to_date(字符串类型,'[fm] YYYY-MM-DD hh[24]:mi:ss')--转换为日期
		to_number(字符串类型)--转换为数值

	日期函数
		months_between(日期1,日期2)--返回两个日期之间的月数
		add_months(日期,月份数)--返回加上月份数后的日期
		next_day(日期,'星期X')--返回日期后星期对应的新日期
		last_day(日期)--返回日期所在月份的最后一天日期
		round/trunc(日期,'year/month/day')
		--对日期进行四舍五入/截断(6月30日为年分界线,15号为月分界线)(舍)
		--日期是四舍五入到星期日，星期二为分界线(舍)
	----实际用法----
		sysdate系统当前时间，可以直接相加减
		sysdate-时间=天数
		months_between(sysdate,时间)=月数
		月数/12=年数
		天数/7=周数

	常用其它函数
		数据库中null和数值相加都等于null
		nvl(exp1,exp2)--如果exp1为null，就用exp2代替。
		nvl2(exp1,exp2,exp3)--如果exp1为null，返回exp3的值，否则返回exp2的值
		decode(value,if1,then1,if2,then2,...,else)
		--如果value=if1，就返回then1的值
		  如果value=if2，就返回then2的值
		  都不满足，返回else的值

	条件表达式
		select e.salary,
			case
				when e.salary>3000 then '高收入'
				when e.salary>1500 then '中等收入'
				else '低收入'
				end
		from emp e;

多行函数(作用于多行，返回一个值)
	max()--求最大
	min()--求最小
	sum()--求和
	count()--计数
	avg()--求平均值


----------------------------------------------------------------
PL/SQL编程语言
对SQL语言的扩展，具有过程化编程特性，主要用来编写存储过程和存储函数等

--声明和赋值
declare
	i number(3) := 10;
	s varchar2(10) := "小明";
	ena emp.ename%type; --ena为emp表中ename列的类型(引用型变量)
	emprow emp%rowtype; --emprow为emp表中的一行(记录型变量)
begin
	dbms_output.put_line(i); --输出使用dbms_output.put_line();
	dms_output.put_line(s);
	--使用into给ena赋值
	select ename into ena from emp where empno=7788;
	dms_output.put_line(ena);
	--给记录emprow赋值(连接使用"||"连接字符串)
	select * into emprow from emp where empno=7788;
	dms_output.put_line(emprow.ename || '的工作为' || emprow.job);
end;

--if判断语句
	declare
		i number(3) := &ii; --&符号后面随便加一个代表输入
	begin
		if i<18 then
			dbms_output.put_line('未成年');
		elsif i<40 then     --注意：这里是"elsif"!!!
			dbms_output.put_line('中年人');
		else
			dbms_output.put_line('老年人');
		end if;             --这里要打冒号
	end;

--switch判断
	declare
		i number(3) := &ii; --&符号后面随便加一个代表输入
	begin
		case
		when i<18 then
			dbms_output.put_line('未成年');
		when i<40 then     --注意：这里是"elsif"!!!
			dbms_output.put_line('中年人');
		else
			dbms_output.put_line('老年人');
		end case;              --这里要打冒号
	end;

--三种循环语句
------while循环------
	declare
		i number(2) := 1;
	begin
		while i<11 loop
		dbms_output.put_line(i);
		i := i+1;
		end loop;
	end;
------exit循环------(用的较多)
	declare
		i number(2) := 1;
	begin
		loop
			exit when i>10;
			dbms_output.put_line(i);
			i := i+1;
		end loop;
	end;
------for循环------
	declare
	begin
		for i in 1..10 loop
		dbms_output.put_line(i);
		end loop;
	end;

--异常处理语句
	exception
	when 异常类型|用户定义异常|异常代码|OTHERS then
	异常类型
	zero_divide --除数为0
	value_error --数据赋值错误
	no_data_found --没找到数据
	too_many_rows --太多行
	自定义异常
	[异常名称 exception
	raise 异常名称] --抛异常
	--系统自带的可不写这两行
	exception
	when ... then ...


--游标----------------------------------------------------
游标cursor的四个属性：%isopen %found %notfound %rowcount
declare
	cursor c1 is select * from t_emp; --定义游标
	emprow emp%rowtype; --定义一个记录型变量
begin
	open c1; --打开游标
		loop --循环
			fetch c1 into emprow; --取一行数据赋值
			exit when c1%notfound; --退出条件
			dbms_output.put_line(emprow.ename); --输出名字
		end loop;
	close c1;
end;
--带参数游标
declare
  --参数列表写在游标后面
  cursor c2(s t_emp.sex%type) is select eid from t_emp where sex=s;
  vc_id t_emp.eid%type;
begin
  open c2('M');--参数赋值
  loop
    fetch c2 into vc_id;
    exit when c2%notfound;
    update t_emp set ename=concat(ename,'M') where eid=vc_id;
    commit;
  end loop;
  close c2;
end;
-----------------------------------------------------------
--存储过程(可以作为一个独立的部分执行)
create or replace procedure 存储过程名称(参数名 in/out 参数类型)
is
变量名 变量类型；
begin
程序体
end；

--存储函数(只能放到sql语句中使用,可以自定义函数使用)
create or replace function 存储函数名称(参数名 参数类型)
return 返回数据类型
is
结果变量 类型；
[变量名 变量类型；]
begin
程序体
return(结果变量)
end；

--程序包(创建程序包头/体都不用写begin,但要写end)
create or replace package my_pck --创建包头
as
  type refcursor is ref cursor; --声明动态游标

  procedure p_selmoneymorethan( --声明存储过程
		    in_money in number,			--输入参数
		    out_ref_list out refcursor	--输出参数(游标)
		    );

  function f_selectAll return refcursor; --声明函数
end my_pck; --结束包头
create or replace package body my_pck --创建包体
as
  procedure p_selmoneymorethan( --存储过程实现
        in_money in number,
        out_ref_list out refcursor --游标作为输出参数返回结果时不能关闭
        ) is
  begin
    open out_ref_list for select * from bankcard where balance>in_money;
  end p_selmoneymorethan;
  function f_selectAll return refcursor is --函数实现
    out_ref_list refcursor;
  begin
    open out_ref_list for select * from bankcard;
    return out_ref_list;
  end f_selectAll;
end my_pck; --结束包体

-----------------------------
注意：在java代码中调用存储过程和函数时
	1.statement使用CallableStatement
	2.sql语句中这么写sql="{call 包名.存储过程/函数(参数)}"
	3.设置输入参数使用callableStatement.setObject(第几个,值)；
	4.得到输出
		callableStatement.registerOutParameter(第几个,OracleTypes.数据库中的类型)；
		resultSet = (ResultSet)callableStatement.getObject(第几个);
-----------------------------

--事务
是数据库操作的最小共走单元，是作为单个逻辑单元执行的一系列操作
四大特性
1.原子性:一个事务里面的操作要么全部成功，要么全部失败。
2.一致性:事务的状态保持一致，如转账的两个账户总金额不变。
3.隔离性:各个事务之间互不影响。
4.持久性:一个事务一旦提交，更改就是永久性的。即时数据库系统崩溃也能恢复。
原生jdbc实现事务：设置连接为手动提交，sql语句执行完后在提交，否则回滚。
PLSQL编程实现事务：使用存储过程/函数把多个操作封装到一起。

--视图
视图就是提供一个查询的窗口，所有数据来自于原表
创建视图必须要有DBA权限。
视图也可以增删改查，对视图的操作就是对原表的操作
create or replace view 视图名 as select ... (with read only)
后面加with read only为只读视图
视图作用
1.屏蔽掉一些敏感字段；
2.保证总部与分部数据及时统一。

--触发器
就是制定一个规则，在我们做增删改操作的时候只要满足规则就自动触发无需调用。(不能显示调用)
1.一个表上最多可有12个触发器;
2.触发器中可以调用存储过程;
3.触发器及其调用的过程中不能包含事务控制语句;
作用：
	自动生成数据
	提供审计和日志记录
语句触发器:不包含for each row的触发器(不管影响多少行,只执行一次)
行级触发器:包含for each row的触发器(为了使用:old或:new或一行记录)
create or replace trigger 触发器名称
before/after
insert/delete/update
on 表名
[for each row]
begin
 执行的操作
 (:old原来的行,:new操作完后的行)
end;
--触发器常用之主键自增
create sequence s_bankcard start with 100003; --创建序列
create or replace trigger autoid
before insert
on bankcard
for each row
declare
begin
  select s_bankcard.nextval into :new.cardid from dual;
end;